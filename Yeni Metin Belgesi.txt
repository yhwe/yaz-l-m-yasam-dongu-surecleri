   Yazýlým yaþam döngü modellerini size tanýtacaðým. Bildiðiniz gibi projelerde yazýlým geliþtirme yaparken her iþte olduðu gibi bir sistematik izlemeliyiz. Bu sistematikler bize yapacaðýmýz iþte kolaylýk saðlar ve yol haritamýz olurlar. Yazýlým geliþtirme yaparken de bu sürecin bir yaþam döngüsü vardýr. Yazýlým projeleri kendi özelinde kolaylýkla gereksinimleri deðiþebilen ve istekleri asla son bulmayan projelerdir. Yani anlayacaðýnýz sistemsiz asla olmayacak iþlerden biridir yazýlým geliþtirme. 
   
   Peki bir sistemde ne gibi deðiþkenler vardýr? Analiz, tasarým, kodlama, test ve entegrasyon. Analizde birçok ihtiyaç belirlenir. Mümkün olan en basit ve verimi en yüksek çýktý oluþturmak için analiz aþamasýný sýký tutmalýyýz. Üründen beklenenlerin yazýlmasýnýn yanýnda soruna dair de detaylý bir bakýþ bize kesinlikle vizyon katacaktýr. Tasarým aþamasýnda analizler doðrultusunda yapacaðýmýz ürünü mantýksal ve fiziksel olarak þekillendiririz. Projemiz bu aþamada iskelet kazanýr. Bu aþamadaki temel amacýmýz detaylara da hâkim olmak olsa da temel sorunu kesin olarak çözdüðümüzden emin olmamýz bizi ortaya çýkabilecek olan deðiþimlerden en az hasar alacak þekilde muhafaza eder. Her daim temel soruna kafa yorarak ilerlersek yapmýþ olduðumuz detaylarda kaybolmayýz. Herkesin bildiði hayatýn þifresi gibi olan pareto prensibini kullanmalýyýz. Bizden istenen ve temel olarak iþlevini yerine getirse dahi yetecek olan ana problemin çözümü, yapacak olduðumuz projedeki detaylara oranla bize çok daha az efor harcatmasýna raðmen üzerinde durulmasý gereken neredeyse en önemli þeydir. Kodlama aþamasý da yazýlým geliþtirme denince akla gelen ve kafayý tamamen dolduran tek þeydir. Özünde bu iþin temeli planlama olsa da insanlarýn aklýnda bu þekilde kalmýþ olmasý oldukça þaþýlacak bir durumdur. Bu aþamada kodumuzu yazarýz. Planlarýmýzýn hayata geçtiði ve az çok ürün halini aldýðý aþama burasýdýr. Naçizane fikrim en basit aþamanýn burasý olduðu kanaatinde. Test aþamasý ise bizi çok mutlu edebilir. En son ne zaman hatasýz bir iþ yaptýnýz? Bu aþama en önemli ve en can sýkýcý olan bölümdür. Yapmýþ olduðumuz mantýksal hatalara kadar uzanan sorunlarý görür ve gereken aksiyonu alýrýz. Entegrasyon aþamasýnda ise testlerden sonra ortaya çýkan nihai ürünümüzü gereken ortamda kullanýma sunarýz. Bakým yapmak dýþýnda artýk projemiz tamamlanmýþtýr. Bu aþamalarý kendi sistematiðinde farklý þekillerde bir araya getirerek kullanmak bize doðru strateji ile en az maliyetle en verimli geliþtirme sürecini yaþamamýzý saðlar. 

   Genel çerçevede bakacak olursak yazýlým geliþtirmede modeller þu þekilde sýralanabilirler: geliþi güzel geliþtirme, v süreç modeli barok Modeli, þelale (waterfall) modeli, helezonik (spiral) model, arttýrýmsal (incremental) geliþtirme modeli, döngüsel model, çevik (agile) yazýlým geliþtirme metotlarýdýr. 

   Tasarýmlarý anlatmaya geliþi güzel model ile baþlayalým. Bir model midir pek emin deðilim, bununla birlikte literatüre 1960’larda kullanýlan bir yöntemdir. Adý yeterince açýklayýcý. Herhangi bir belgeleme ve yol haritasý izlenmeksizin yapýlan kodlamadýr. Amaç yalnýzca çalýþan ürün elde etmektir. Bu yöntemde bakým ve hata ayýklama iþlemlerini yapmak oldukça zordur. Sistem olmadýðýndan genellikle tek kiþinin yazdýðý kodlarda bu tekniði görebiliriz. Karmaþýk ve zor problemleri bu yöntem ile çözmeye çalýþmak akýl saðlýðýnýz açýsýndan hoþ olmayacaktýr. Basit, kýsa ve ürün odaklý projelerde kullanýlabilir olarak bakýyorum. 

   Dilerseniz sýradaki modelimizle devam edelim. Barok modeli 1970’li yýllarda ortaya çýkan eski bir modeldir. Yazýlým geliþtirme süreçlerini doðrusal olarak ele alýr. Bu modelde yapýlan iþin belgelenmesi ve kaydý ayrý bir süreç olarak ele alýnmasýnýn yanýnda tüm süreçler bittikten sonra yapýlýr. Süreçlerin geri dönüþü ve ileriye nasýl gideceði tanýmlanmamýþtýr. Plansýzlýk ve belgeleme iþinin sonda olmasý sebebi ile günümüzde kullanýmý söz konusu deðildir. Yazýlým geliþtirme tarihinden bir kesit olarak bu modele de veda ediyoruz. 

   Sýradaki þanslýmýz çaðlayan yaþam döngü modeli olacak. Bu model temel olarak çok iyi tanýmlanmýþ ve yapýmý kýsa projeler için geçerli bir modeldir. Elbette bir yazýlým projesi ne kadar iyi tanýmlanmýþ olursa olsun yine de gereksinimler deðiþiklik gösterebilir. Bu sebeple pratikte çok da istenildiði gibi sonuç vermeyebilir. Günümüzde kullanýmý giderek azalmaktadýr. Bununla birlikte geçmiþte en popüler modeldi. Eski, tanýnmýþ ve temel bir modeldir. Klasik geliþtirme modeli olarak bilinir. Modelimizde yazýlým aþamalarýn en az bir kez tekrar edilmesi ile yazýlýr. Genel manada þelale modelinin felsefesi bir süreç bitmeden diðer sürece geçmemektir. Her süreç kendi içerisinde tamamlandýktan sonra bir sonraki aþamaya geçilir. Örnek verecek olursak tasarým aþamasý tamamen bitmeden kodlama ve test aþamalarý baþlamamalýdýr. Süreç temel anlamda þu aþamalarýn sýrasý ile bitirilip belgelendiðinde bir sonraki aþamaya geçilmesi ile devam eder. Aþamalar arasýnda bir öncekine ve bir sonrakine geçiþ saðlanabilir. Süreç sýrasý þudur: gereksinim, analiz, tasarým, uygulama, bakým. Modelde bir süreç son bulup belgelenmesi tamamen bitince bir sonraki sürece geçilir. Barok modelin tersine burada aþamalar arasý geri dönüþlerin nasýl yapýlacaðý tanýmlýdýr. 
   Bu modelde belli dezavantajlar vardýr. Gerçek hayatta müþteri ihtiyaçlarýný baþtan sona çok doðru þekilde aktaramayabilir. Bu durum sonucunda geliþtirilen ürün tam olarak istenildiði gibi olmayacaktýr. Düzenleme veya yeniden yapmak oldukça maliyetli olacaðýndan bu model özelinde süreçlerin hýzlý ve oldukça mükemmel yapýlmasý gerekmektedir. Baþka bir durumda ise yapým süresinin sadece sonunda ürün oluþur. Bu nedenle süreç içerisine müþteriyi dahil etmek oldukça zordur. Yine de mükemmel analiz edilmiþ ve gereksinimleri sabit kalacak bir projede dahi model içerisinde süreçlerin hep ileriye doðru ve mükemmel þekilde gerçekleþmesi öngörülür. Aksi bir durumda geride kalan süreci yeniden uygulamak yüksek maliyetli olacaktýr. Çünkü halihazýrda devam etmek ileriki süreçlerin potansiyel çalýþmasýna da engel olmaktadýr. Süreçlerin mükemmel olmasý gerektiðinden uygulamasý oldukça zordur. 

   Biraz da avantajlarýndan bahsedelim. Þelale modeli anlaþýlýrlýk, uygulanabilirlik ve yönetilebilirlik açýsýndan oldukça güzeldir. Proje yapýmýnda plan hep ileriye yönelik olacaðýndan departmanlar arasý iþ bölümü net sýnýrlarla bellidir. Þelale modelinde gereksinim ve tasarým mükemmel yapýlmalý, bununla birlikte yazýlým geliþtirme süreci olabilecek en kýsa sürede bitirilmelidir. Aksi takdirde deðiþecek gereksinimleri projeye dahil etmek çok yüksek maliyet alacaktýr. Þelale modelinin yüksek maliyetli, düþük verimli ve yüksek riskli olduðunu söylemek pek de yanlýþ olmaz. 

   Þimdi ele alacaðýmýz model v süreç modeli olacaktýr. Bu modelin adýmlarý iki ana parçadan oluþur. Ýlki ürün çýkartana kadar olan bölümdür. Ýkinci aþama ise test aþamasýdýr. V þeklini almasý da þu adýmlar ile gerçekleþir: (sol üstten aþaðýya doðru olan adýmlar) gereksinimler, sistem tanýmlarý, sistemi, alt sistem ve modül;(aþaðýdan sað üst doðru olan adýmlar) sýnanmýþ modül, sýnanmýþ alt sistem, sýnanmýþ sistem, bitmiþ sistem ve sistemdir. Süreç adýmlarý sol üstten baþlayarak v þeklinde ilerleyerek uygulanýr. Þelale modelinin geliþmiþ bir versiyonu olarak düþünülebilir. Gördüðünüz gibi v þeklinde olan üretimin sol tarafý üretim, sað tarafý da sýnanma bölümüdür. Þelale modelinden daha detaylý bir üretim modeli mevcuttur. Bu sayede proje takibi kolaydýr. Aþamalar arasý tekrar kullanýlmaz. Sistem gerçekleþtirme sýrasýnda ortaya çýkan bir sorunu çözmek için sistem isteklerinin çözümlenmesinin tekrarlanmasý gerekir. Belirsiz durumlarý mümkün olduðunca az olan, gereksinimlerini kolaylýkla belirtebildiðimiz bilgi teknolojisi projeleri için oldukça mükemmel bir yöntemdir. Test imkanlarýnýn sürecin yarýsýný kaplamasýnýn vermiþ olduðu rahatlýktan dolayý kullanýcý projeye kolaylýkla katký saðlayabilmektedir. 

   Bir sonraki modelimiz spiral model. Spiral modelin kafanýzda mükemmel þekilde oturmasý için bir benzetme yapacaðým. Bir yarýþ pisti düþünün. Siz de bir yarýþçýsýnýz. Dört tane kontrol noktasý olan bir pist bu. Bu kontrol noktalarý þunlardýr: planlama, risk analizi, üretim ve kullanýcý deðerlendirmesidir. Yarýþ planlama ile baþlar ve turlar atarak ürün nihai haline gelene kadar ilerler. Her tur bir faz olarak proje için deðer alýr. Her faz bitiþi bir ürün vardýr. Sürekli kullanýcýdan geri dönüþ alýnýr. Bu sebeple kullanýcýnýn çýkan üründen memnuniyetsiz olmasý gibi bir durum neredeyse imkansýzdýr. Þelale modelinden farklý olarak spiral model buradaki riskleri göz önüne alýr. Çaðdaþ modellere oldukça benzerdir. Yaklaþýmý göz önüne alýndýðýnda düþük riskli ve kolay projeler için pek uyumlu olmadýðý fark edilecektir. Bu fazlý yapý sayesinde temelden bütüne doðru inþa edilen projenin her katmanýnýn saðlam ve doðru olmasý beklenecektir. Planlama aþamasýnda ara ürün için bir amaç, yöntem belirleme ve önceki ürün ile bütünleþtirme yapýlýr. Sonraki aþamada risk analizi yapýlýr ve riskler belirlenir. Devamýnda ara ürün üretilir. Üretilen ara ürünün kullanýcý deðerlendirmesi ve testine sunulmasý ile bir faz bitmiþ olur. Amaç doðrultusunda yeniden bir faz yapýlýr. Yinelemeli artýmsal ve prototip yaklaþýmý vardýr. 
   Bize saðlayacaðý faydalardan bahsetmek gerekirse ilk olarak kullanýcýlar sistemi erkenden ve sürekli olarak görürler. Kullanýcýnýn iþin içinde sürekli olarak bulunmasý beraberinde insan kaynaklý iletiþim sorunlarýný getirse de þelale modelindeki gibi yanlýþ ürün uðruna çok yüksek iþ gücü sarf edilmesi riskinin en aza indirgenmesini saðlar. Geliþtirme küçük parçalara bölündüðünden hem daha efektif çözümlerin var olmasýna olanak saðlar hem de riskli kýsýmlarý önce gerçekleþtirme imkanýný saðlar. Bu sayede proje kolaylýkla bir soðan yapýsý gibi geniþler ve ilerler. Bu yapý kendi içinde pek çok yazýlým modelini bulundurur. Ýçinde bulundurduðu risk analizi, potansiyel tehditleri öngörür. Bu sayede karþýlaþýlacak olan zorluklar ya engellenir ya da zaten hazýrlýðý yapýlmýþtýr. Çýkan hatalar en kýsa sürede giderilir. 

   Biraz da zayýf olduðu konulara bakarsak tahmin edebileceðiniz gibi ilk konu karmaþýklýk olacaktýr. Departmanlarýn sürekli birbiri ile etkileþim içinde olmasý iletiþimin önemini gözler önüne serer. Düzgün yönetilemezse belgelerin çokluðu takibi inanýlmaz zorlaþtýrýr. En korkutucusu da spiral sonsuza dek gidebilir. 

   Bir sonraki modelimiz artýmsal geliþtirme süreç modeli. Artýmsal geliþtirme süreç modelinde temel yapý bir prototip yaparak kullanýcýya en temel gereksinimi hemen vererek ilerleyen geliþtirme aþamalarý ile kullanýcýya sürekli geliþmiþ bir ürün sunmaya dayalý olarak gerçekleþir. Analiz, planlama ve tasarým sonrasý iþ planý oluþturulur. Önceliklendirilen kullanýcý gereksinimlerine göre prototip özellikleri ve yapýlacak olan artýmsal geliþtirmedeki eklenecek olan gereksinimler oluþturulur. Bu sayede ilk üründen itibaren kullanýcýya temel ihtiyacý verilmiþ olur. Eksiklikler olsa da bu yöntemde temel unsurlarýn hatasýný en aza indirmek mümkündür. En çok test edilecek ve kullanýlacak olan özellik en saðlamý olacaktýr. Ýlk andan itibaren çalýþan bir ürüne sahip olan kullanýcý da yazýlýmý son anda elde etmeye kýyasla kesinlikle daha karlý olacaktýr. Bir artýmýn döngüsüne girildiðinde o artým özelliði için gereken gereksinim analizi durmuþ olur. Deðiþimler artýmlarýn var olduðu fazda gerçekleþtirilebilir. Anlayacaðýnýz her sürüm bir diðer sürüme özellik ekleyerek ve kapsayarak gelir. Baþta ortaya çýkacak ürün eksik olacaðýndan bu duruma uyum saðlamasý muhtemel projeleri artýmsal geliþtirme kullanarak yapmak münasip olacaktýr. Bir yandan da yapýlan bu artýmlar uzun zaman alacaktýr. Kýsa vadede tüm ürünü elde etmek gerekiyorsa anlayacaðýnýz, bu yöntem pek iþlevsel deðildir. Artýmsal geliþtirmedeki gereksinim iþ akýþý, analiz iþ akýþý, tasarým iþ akýþý, gerçekleþtirme iþ akýþý ve test iþ akýþý her artýmda rol alýr. Bu rollerin yoðunluðu ise baþýnda erken baþlar erken biter. Sonunda ise geç yükselip geç biter. Yani gereksinim iþ akýþý erkenden dahil olup erken safhalarda tepe noktasýna ulaþarak azalýrken test iþ akýþýnýn iþ yükü her daim olmasýnýn yanýnda yoðunluðu ilerleyen artýmlarda tepe noktasýna ulaþacaktýr. Bu durum da bize artýmsal geliþtirme modelinin yapýsý hakkýnda güzel bir bakýþ açýsý sunuyor. 

   Avantajlarýna bakacak olursak þunlarý söylememiz muhtemel: Sistemin gereksinimleri müþteri ile iç içe belirlenmektedir. Bu sayede çýkan üründen memnuniyetsizlik oldukça düþer. Gereksinimlerin belirlenmesinde yapýlan hiyerarþi sayesinde yapýlacak artýmlardaki süreç müþterinin sürekli lehinde ilerleyecektir. Erken aþamada yapýlan artýmlar nihai ürünün bir prototipi gibi davranarak kullanýcýya son ürün hakkýnda fikir verir. Artýmsal yapý, projenin tamamen baþarýsýz olma riskini minimize eder. Temel gereksinimlerin test sayýsý sayesinde hata ile karþýlaþýlmasý ihtimali elimine edilir. Parçala ve yönet gibi müthiþ kararlý bunun yanýnda baþarýlý bir felsefeyi benimser. 

   Dezavantajlarý için söyleyebileceðimiz ilk þey artýmlarýn tanýmlanmasý ve planlanmasý için tüm sistemin iyi þekilde analiz edilmesi gerekmektedir. Aksi durumda yapýlacak planlama anlamsýzlaþýr, sistemi baþtan kurgulamak gerekir. Bunun yanýnda gereksinimleri doðru artýmlar ile planlamak bazen çok mümkün olmayabilir. Bu sebeple yeterince iyi bir plan yapmadan iþe koyulmak istenmeyen sonuçlara varacaktýr çünkü artýmlar kendi içinde tekrara izin vermezler. Artýmsal fazlarýn tekrarý da maliyet olarak projeye yansýr. Son olarak ise deneyimli personel gerekeceðinden söz etmekte fayda var. Artýmlarý güzelce uygulamak ve týpký bir yapboz gibi parçalarý doðru kurgulamak gerekir. Aksi halde her artýmda en baþtan bir önceki artýmý yapýlacak olan eklemeye uygun þekilde kurgulamak gerekir. 

   Bir sonraki modelimiz kodla ve düzelt yaþam modeli. Adýndan da anlaþýlacaðý üzere herhangi bir plan ve belgeleme içermeksizin tek isteði ürünü son kullanýcýya teslim etmek olan bir modeldir. Ýlk ürün bir an önce ortaya çýkarýlmak üzere birkaç yüz satýrlýk kod yazýlýr ve sorunsuz olana kadar düzeltilir. Kodla ve düzelt modelinde emeklilik safhasý vardýr. Bu model kullanýlarak yapýlan ürünlerin geliþtirme ve düzeltme maliyetleri oldukça yüksektir. Bir plana sadýk kalmadan doðrudan ürünü kullanýcýya sunmak için yazýlan kod iþlevsel olsa bile kendi içinde müthiþ karmaþýklýklar bulundurabilir. Yazýlým geliþtirmenin en kolay yolu olmasýnýn yanýnda en pahalý yoludur demek hiç de yanlýþ olmaz. Anlýk olarak geliþtirilmesi kolay ve iþ görür olduðundan küçük veya tecrübesiz firmalarca kullanýlýr. 

   Evet, þimdiye kadar olan bölümde eski ve günümüzde kullanýlmayan yöntemleri anlattým. Þimdi size bahsedeceðim yöntemler günümüz yazýlým gerçekleþtirmesinde kullanýlan yöntemler olacaktýr. Bunlar temel anlamda çevik yazýlým geliþtirme metotlarýdýr. Biraz da bu yöntemlere neden ihtiyaç duyduðumuzdan bahsedeyim. Bildiðiniz gibi yazýlým geliþtirme uzun süren ve sýkýntýlý bir süreçtir. Yapýlan ürünlerin göz ardý edilemeyecek kadar büyük bir kýsmý müþteri memnuniyetsizliði ile sonuçlanýr. Sektörde zaman içerisinde çeþitli ihtiyaçlar karþýlanamamýþ, bununla beraber eski yöntemler artýk ihtiyaçlara çözüm getiremez olmuþtur. Biliþim dünyasýnýn hýzýna yetiþmek gerektiðinden farklý yöntemlerin kurulmasý elzem hale gelmiþtir. Böylelikle 1990’larýn sonlarýna doðru çevik yazýlým geliþtirme metotlarý ortaya çýkmýþtýr. 

   Temel prensipte kýsa ve çok döngüler ile yazýlýmý doðabilecek her ihtiyaca ve ayný zamanda oluþabilecek her türlü hataya çözüm bulmak ister. Çevik metotta belge üretmek yerine sýk sýk ekip olarak yüz yüze toplantý yapmanýn saðlayacaðý iletiþimin olabilecek olan deðiþime en doðru ve en kýsa þekilde cevap olabileceðini savunur. Ürün ortaya çýkarýlýr. Ürün üzerine yapýlan toplantýdaki her türlü çýktý deðerlendirilerek geliþime devam edilir. Baktýðýmýz zaman gerçekten de insan doðasýna en uygun çözüm gibi geliyor. 

   Belli deðerleri ve prensipleri vardýr. Deðerlere bakacak olursak: Süreç ve araçlar arasýndaki etkileþimi azami hale getirmeyi amaçlar. Deðiþiklik yönetimini plan üzerinden yapar. Uzlaþýlan taahhüt üzerinden müþteriyle bir arada ve uyumla çalýþýr. Prensipleri ise þu þekildedir: Teslimatý hýzlý ve aralýklarla yaparak müþteri memnuniyetini en kýsa sürede kazanmak, gereksinimlere sonrada eklenen istekler kesinlikle dikkate alýnýr, süreç için esas olunan deðerlendir kriteri çalýþan sistemidir, iþ ve teknik ekip arasýndaki düzenli ve uyumlu çalýþma vardýr, iletiþimin en iyisi mutlak suret ile yüz yüze tartýþma sistemidir, proje güvenilir ve iþin içinden rahatlýkla çýkabilecek kiþiler üzerine kuruludur, düzenli olarak yapýlan iyi iþe övgü verilir, basitlik gereklidir, kendiliðinden oluþan takýmlara sahiptir, deðiþen koþullara yüksek adaptasyon potansiyelini içinde barýndýrýr. 

   Çevik yazýlým geliþtirme metodolojisinin avantajlarýndan bahsetmek gerekirse þunlarý söylemek kesinlikle yerinde olacaktýr. Ýnsan eðilimine ve doðal iletiþimine oldukça uygun bir yaklaþým olduðundan ekibe katýlacak yeni kiþiler için oldukça kolay bir adaptasyon süreci sunar. Kýsa döngülerin sonucu olarak sürekli þekilde ekipler yaptýklarý iþin ürün olarak karþýlýðýný ve geri dönüþünü alýrlar. Bunun saðlamýþ olduðu baþarmýþlýk ve iþe yararlýlýk hissi kiþilere motivasyon ve enerji verir. Sürekli geri dönüþ aldýðý için yapýlacak deðiþimleri ürüne yansýtabilirlik açýsýndan oldukça geliþmiþtir. Planlama aþamasý karmaþýk uzun ve sýkýcý deðildir. Sadece iterasyon ile proje yola koyulur. Kervan yolda düzülür mantýðý ön plandadýr. Deðiþime açýklýk ve esneklik sayesinde günümüz koþullarýna kolaylýkla uyum saðlar. Kalite standardý açýsýndan sürdürülebilirlik oldukça kolaydýr. Küçük parçalarýn kalitesini düzgün tutmak bütüne yayýldýðýnda mükemmele yakýn bir ürün verecektir. Projenin planlamasý ve yürütmesi bir arada olduðundan uyumsuzluk gibi problemler yaþanmaz. Etkileþim sayesinde istenen özellik ürüne kolayca ve hatasýz yerleþtirilir. Takým oyunu söz konusudur. 

   Hiçbir þeyin mükemmel olmadýðý gibi bu teknik de mükemmel deðildir. Öncelikle kurumsal yapýlarda uygulamasý oldukça zordur. Belgeleme ile ilgili bilinen eski doðrularý kökünden deðiþtirir. Ýhtiyaçlara bu denli açýk olmanýn verdiði kolaylýk ile her ihtiyaca cevap vermenin yarattýðý iþ yükü çok üst boyutlara çýkabilir. Takýmýn yaptýðý ürün tamamen üretimde yer alan kiþilere de hitap edeceðinden projenin baþarýsý kiþileri kariyerini de þekillendireceðinden, burada bir kariyer riski söz konusudur. Takým üzerinde sürekli bir hedef baskýsý vardýr. 

   Þimdi de bir çevik yazýlým geliþtirme metodu olan extreme programming’e göz gezdirelim. Extreme programming, Kent Beck tarafýndan 1999 yýlýnda bir yazýlým geliþtirme disiplini olarak ortaya çýkmýþtýr. Extreme programming gurup içi etkileþime önem veren, geri dönüþleri dikkate alan ve kolay bir yazýlým geliþtirme yöntemidir. Extreme programming yazýlým geliþtirmede kolaylýðý saðlamak için on iki farklý pratiði göz önünde tutar. 

   Bu pratiklerden önce temel deðerlerini anlayalým. Bu temellerden ilki iletiþimdir. Extreme programming’in temel taþý olan iletiþim çok gerekli bir kavramdýr. Projelere dýþarýdan bir göz ile baktýðýmýz zaman var olmakta olan en temel problemin insanlarýn birbirini tam olarak anlayamamasý olduðunu kolaylýkla görürüz. Bu insanýn olduðu her sistemde mümkün olan bir þeydir. Bazen programcýlar sormalarý gereken soruyu sormazlar. Bu onlarýn sorunu deðilmiþ gibi yapamayýz. Bu konu hepimiz için geçerli olsa da önemli bir problemdir. Bazen de projenin yapýsý ile ilgili önemli bir geliþmenin zaten herkesçe bilindiðini farz ederler. Bu yanlýþ anlaþýlma kötü sonuçlar doðurur. Bu gibi sebepler ile projelerde duraksamalar olur. Bazen de proje yöneticileri programcýlara aktarmalarý gerekeni doðru ve anlaþýlýr þekilde aktarmazlar. Bu da projenin geliþtirme süreçlerini kötü anlamda etkiler. Söylemiþ olduðum ve daha pek çoklarýnýn var olduðu bu sorunlarýn temelinde iletiþimin kötülüðü yatar. Extreme programming iletiþimdeki bu eksiklikleri kaldýrmayý amaçlar. Tam da bu sebeple iletiþimler yüz yüze olmalýdýr. Yazýlýmý yazan ekip sadece kendi içinde deðil, ürünü kullanacak olan kiþiler ile de yüz yüze iletiþim halinde olmalýdýr. Bilgi akýþý projenin hýzýný kesmemesi için olabildiðince hýzlý olmalýdýr. 

   Extreme programming için bir diðer temel taþ da basitliktir. Özünde bu kavramý saðlamak oldukça zordur. Basitlik gereken görevi en sade þekilde yapmaktýr. Basitlik, azlýk ya da eksiklik deðildir. Az çoktur felsefesini bilirsiniz. Minimalizm için söylenen sözlerden biridir. Basitlik ve sadelik, her zaman ihtiyacýmýz olmuþtur. Extreme programming için basitlik, gelecekte oluþacak olan yeni gereksinimleri öngörmektir. Öngörülemeyecek gereksinimler için de yapýlacak basit tasarým bize esneklik saðlar. O anki gereksinimleri karþýlayan en basit çözümü kullanmak bu iþin ayaklarýndan biridir. Ýleride karþýmýza çýkacak gereksinimler için programýmýzý revize etmek oldukça kolay olacaktýr. Karmaþýk çözümler bu yol için uygun deðildir. Özünde temel ihtiyaçlarý basit ve esnek þekilde karþýlayan bir sistem oluþturmayý amaçlar. Bir sonraki temel deðer ise geri bildirimdir. Extreme programming özelinde müþteri proje gurubunun bir üyesidir. Belli aralýklar ile yapýlan müþteri ve yazýlým ekibi buluþmasýnda gelinen son noktaya bakarlar. Sonradan büyüyecek hatalar ve anlaþmazlýklar ortadan kalkar. 

   Extreme programming için mücadele gerektiren temel deðer cesarettir. Baþarýsýzlýktan korkmak yerine baþarýsýzlýk sebeplerinin üzerine gitmek gerekir. Eðer ki yaptýðýnýz iþten memnun deðilseniz tamamen çöpe atýp yenisini yazabilmelisiniz. Bu sayede mükemmeliyetçi bir yaklaþým ortaya çýkar. Baþarýsýzlýk korkusu projeyi yavaþlatýr potansiyel verimi azaltýr. Korkusuzca yapýlacak þeyler denenmeli ve uygun adým atýlmalýdýr. 

   Extreme programming için on iki adet pratik vardýr. Bu pratikler yazýlým geliþtirme sureci için esneklik ve kullanýlabilirlik saðlar. Pratiklerden ilki planlama oyunudur. Yapýlacak yinelemelerde müþterinin de içinde olduðu toplantý ekibinde yapýlacak iþ için planlanan süre belirlenir. Bu hareket müþteri ile uyum içerisinde geliþtirmeye olanak saðlar. Müþteri ve teknik ekip iþ birliði içinde geliþtirmeyi yapmasý her türlü bilgiye anýnda eriþim ve þeffaflýk saðlar. Ýkinci pratik de önce test yaklaþýmýdýr. Programdaki kodu geliþtirmeden önce test için gerekli programý yapmalýsýnýz. Bu sayede kodu yazma aþamasýnda dahi hatalarý görüp düzeltme imkâný oluþturur. Üçüncü pratik ise basit tasarýmdýr. Bu pratik gereksinimleri tamamen karþýlayan basit bir tasarým yapýlmasý gerektiðini söyler. Bu sayede anlaþýlýrlýk, yönetilebilirlik ve deðiþtirilebilirlik açýsýndan rahat bir ürün ortaya çýkar.  Dördüncü pratik çiftli programlamadýr. Programýn yazýmý aþamasýnda yazýlýmcýlar kendi yetenekleri doðrultusunda yazýlýma destek verirler. Bu durum olabilecek en hýzlý þekilde yazýlýmýn yazýlmasýný saðlar. Bunun yanýnda yazýlýma farklý bakýþ açýlarý tarafýndan bakýlmasý, yazýlýmýn çözümünü daha iyi hale gelmesinde önemli bir durumdur. Sonuçta bir elin nesi var iki elin sesi var. Beþinci pratik de sürekli entegrasyondur. Yapýlan deðiþiklikler hemen kullanýlan ürüne entegre edilir. Bu sayede hýzlý þekilde geri bildirim alarak kolayca hata ayýklama ve geliþtirme faaliyetleri yapýlýr. Altýncý pratik ise kýsa aralýklý sürümler oluþturmaktýr. Kýsa aralýklarla geliþtirilen ürün sunulur. Bu sayede kullanýcý özellikleri sürekli kapsamý artan ve yaþayan bir uygulama ile takip edebilmektedir. Yedinci pratik yeniden yapýlandýrmadýr. Kodun tasarýmý sürekli gözden geçirilir. Bu sayede kodun daha kolay ve basit þekilde yapýlabilmesine olanak saðlar. Bu geliþtirme sayesinde müþteri memnuniyeti en üst noktaya taþýnýr. Sekizinci pratik ortak kod sahiplenmedir. Oluþturulan kod tüm ekibin ortak malýdýr. Bu sebeple ekip içerisinde oluþabilecek olumsuzluklar ortadan kalkarak kodlarýn düzenlenmesi tüm ekibe yayýlýr. Dokuzuncu pratik benzetimdir. Yapýlan iþi toplantýlarda daha anlaþýlýr ifade etmek için metaforlar kullanýlýr. Bu sayede ekip içinde bulunduklarý durumu anlar, ilerlemenin somutlaþtýrýlmasý sayesinde müthiþ bir motivasyon kazanýr. Onuncu pratik kodlama standardýdýr. Ekip belli bir standarda göre kod yazar. Bu sayede karmaþýklýk en aza indirilir, kod rahatça anlaþýlýr. On birinci pratik haftada kýrk saat pratiðidir. Her gün sekiz saat çalýþmayý öngörür. Haftada sadece bir kez fazla mesai yapýlabilir. Fazla mesainin maliyetli ve verimliliði olumsuz etkileyeceðini savunur. Son pratik ise yukarýda da bahsettiðim gibi ekip ile müþteri iliþkisidir. 

   Bir sonraki modelimiz scrum modeli olacaktýr.  Scrum rugby sporundaki bir hücum þeklinin adýdýr. Bu taktik özelinde yapýlan iþ takýmýn tamamýnýn karþý sahaya top taþýyarak sert bir atak yapmasýdýr. Rugby sporunda da olduðu gibi benzer bir mantýk yazýlým geliþtirme metodunda vardýr. Takým toplanýr, plan yapýlýr ve görevler takým içindeki bireylere daðýtýlarak herkesin amaç doðrultusunda birleþip görevi takýmca baþarýlý þekilde bitirmesi öngörülür. 

   Tarihine baktýðýmýzda scrum, Jeff Sutjerland ve Ken Schwaber tarafýndan 1990’larda geliþtirilen çevik yazýlým geliþtirme yöntemleriyle birlikte uygulanabilecek bir proje yönetim þeklidir. Evet doðru okudunuz. Bu yöntem bir yazýlým geliþtirme metodundan çok daha ötesidir. Pek çok yönetim biçimine uygulanabilir. Bu yöntemde karmaþýk iþleri daha küçük parçalara bilerek halletmek icap eder. Takýmca bir iþi halletmek karmaþýk tanýmlar ve görevler ile olmaz. Takým içerisindeki her birey kendine düþen küçük birimi yapar ve bütüncül iþe bakýldýðýnda baþarýlan görev gerçekten devasa olacaktýr. Karmaþýk görevleri adým adým kararlý þekilde halletmek isteyen ekipler için biçilmiþ kaftan desek pek de yersiz olmaz. Kocaman bir lokma yutmaktansa küçük küçük sindirmek bazý görevler için gerçekten elzemdir. 

   Scrum yöntemi böl ve bütünsel olarak saldýr prensibi ile bana sindirimi hatýrlattý. Yoðun bir küp þekeri aðzýnýza attýðýnýzda erimesi ve tamamen kaybolmasý toz þekeri aðzýnýza attýðýnýz duruma odakla çok daha uzun olacaktýr. Ekbinizi aðýzdaki sývý enzim olarak düþünürseniz ekipçe parçalanmamýþ, karmaþýk ve tam olarak ne istendiðinin net sýnýrlarla belli olmadýðý o koca küp þekere saldýrmazsýnýz. Böyle bir durumda koca küp þekerin içinde kaybolursunuz. Scrum tam da burada böl ve takým olarak amaca ulaþ yöntemi ile gerçekten günümüzde geçerli olan o büyük projeler için olmazsa olmaz bir yöntemdir. 

   Takým ile her gün on beþ dakikalýk kontrol toplantýlarý yaparak en fazla otuz gün süren döngüler halinde karmaþýk süreçlerin nasýl da elinizde kaybolduðunu göreceksiniz. Belli kavramlara sahip olan scrum metodunu inceleyelim. Product backlog: müþteriden analiz ile alýnan olmazsa olmaz gereksinim listesi olarak bakabilirsiniz. Sprint backlog: on beþ ya da otuz günlük projedeki bölümlerdir. Hedefler gibi düþünülebilir. Birden fazla sprint backlog ile projeyi halledebilirsiniz. Scrum Daily meeting: adýndan da anlaþýlacaðý üzere her gün durumu kontrol altýnda tutmak amacý ile yapýlan en fazla yarým saat süren durum deðerlendirme toplantýsýdýr. Bir nevi iþ için kamçý desek hiç de hata olmaz gibi, ne dersiniz? 

   Scrum temel kavramlarý üç adettir. Roller, toplantýlar ve bileþenler olarak sýnýflandýrabiliriz. Detaylarýna bakacak olursak roller içerisinde ürün sahibi, scrum yöneticisi ve scrum takýmý bulunur. Ürün sahibi projenin iþ deðeri açýsýndan geri dönüþünden sorumlu kiþidir. Scrum yöneticisi takýmýn iþleyiþini yönetir. Takýmýn scrum yönteminde ve yolunda kalmalarýný saðlar. Scrum takýmý ise beþ ila dokuz kiþiden oluþan görevleri yerine getiren yazýlým takýmýdýr. Kendi iç dinamiðinde yüksek iletiþim barýndýrýr.  Kýsaca bir takým gibi amaca uygun þekilde çalýþýrlar. 

   Toplantý kavramýna baktýðýmýz zaman ilk olarak sprint planlama ile karþýlaþýrýz. Burada gereksinim listesinin kapsayýcý þekilde ortaya çýkmasý gerekir. Baþarýlý bir geliþtirme için takýmlara doðru þekilde gereksinim daðýtýlmasý gerekir. Ortak amaca sahip gereksinimleri ayný takýma vermek için analizler yapýlmalýdýr. Takýmlarýn uygun þekilde belirlenmesi gerekir. Ýletiþim çok önemli olduðundan kiþilerin birbirleri ile olan anlaþma seviyesini göz önünde bulundurmak biraz sosyal zekanýzý kullanmanýz açýsýndan önemlidir. Risklerinizi analiz etmelisiniz. Geliþtirme araçlarýnýn altyapýsý hakkýnda mutabýk olunmalý. Doðru araçlar seçilerek takýmlarýn verimliliklerini üst düzeyde tutmak gereklidir. Tüm maliyetlerin hesabý yapýlmalýdýr. Süreç içerisinde doðacak her türlü mümkünatý deðerlendirmek gerekir. Süreç için her türlü konuda kararýn alýnmasý ve onaylanmasý gerekir. Sprintlerin baþýnda planlama toplantýsý olmazsa olmazdýr.  Baþka bir toplantý ise sprint gözden geçirme toplantýlarýdýr. Burada planlamadan arta kalan iþlerin yapýlmasý söz konusudur. Ýlk kýsýmda ürün sahibi, takým ile birlikte ürün gereksinim listesindeki detaylara bakar ve istem elemanlarýnýn amaç ve yöntemlerini belirler. Toplantýnýn ikinci kýsmýnda ise takýmlar ürün istem listesindeki maddelerin kendilerine uygun olanlarýný belirleyerek koþu gereksinim listesini oluþtururlar. Bu scrum için altýn uygulamadýr. Takým ürün sahibi tarafýndan sýralanmýþ istemlerin kendisi tarafýndan yapýlacak olan miktarýný belirler ve taahhüt eder. Bir sonraki toplantý çeþidi de günlük scrum toplantýsýdýr. Sprint baþladýðý andan itibaren her gün kýsa bir toplantý yapýlýr. Bu scrum için gümüþ deðerinde olan uygulamadýr. Genelde sabahlarý belirlenen saatte takýmca durum deðerlendirilmesi için toplantý yapýlýr. Takýmýn ilerleyiþi ve ortaya çýkan olumsuzluklarý görmek için bire birdir. Ekip üyeleri kýsa vadeli planlarýný ve bu planlarýn uygulamasýndaki aþamalarýný gösterirler. 

   Scrum için bir diðer temel kavramýmýz ise bileþenler araçlardýr. Bu araçlara göz atmaya ürün gereksinim dokümaný ile baþlayalým. Bu doküman proje boyunca halledilmesinin elzem olduðu iþ elemanlarýnýn bir listesidir. Ürün gereksinim listesi sabit bir liste deðildir. Geçerliliðini korumasý ve iþlevsel olmasýný istiyorsak sürekli güncellemeliyiz. Bu liste kullanýcýlarýn bakýþ açýsýndan ihtiyacýmýz olan þeyleri bize gösterir. Bir diðer bileþen sprint dokümanýdýr. Mevcut sprint için elde edilen product blocklog görevlerini kapsar. Ýþlerin amacý, sprint sonundaki ürün parçasý olan bir parçayý elde etmektir. Sadece takým tarafýndan deðiþtirilebilir. Bir diðer bileþen ise sprint kalan zaman grafiðidir. Bu grafik ile idealdeki yapýlanlar ile gerçekte yapýlanlarýn karþýlaþtýrýlmasýný saðlar. Bir sprint sürecinin idealinde günde beþ saatlik iþ yükünün bitirilmesi gerekir. Takým üyeleri ne kadar iþ yaptýklarýný günlük olarak belirtirler. Bütünsel bir bakýþ atacak olursak scrum modeli kýsa vadeli planlar ile küçük parçalarý halletmeyi isteyen bir modeldir. Geri dönüþler ve sorunlara uyum saðlamak gerçekten elzemdir. Her yinelemede projenin son haline biraz daha yaklaþýlýr ve proje sonu için birden fazla yineleme gerekebilir. Gerektiðinde dokümanlar hazýrlanýr. Saygýlar…
Kullanýlan kaynaklar:
https://systemanalize.wordpress.com/gelistirme-metotolari/ 
https://www.iakademi.com/yazilim-gelistirme-metodolojileri/ 
https://www.slideshare.net/m_korkmaz/yazilim-gelistirme-yntemleri
https://hayririzacimen.medium.com/yaz%C4%B1l%C4%B1m-ya%C5%9Fam-d%C3%B6ng%C3%BCs%C3%BC-ve-s%C3%BCre%C3%A7-modelleri-70fdfb2f8f77
https://fikirjeneratoru.com/yazilim-proje-yonetimi-yontemleri/ 
https://medium.com/@omerharuncetin/yaz%C4%B1l%C4%B1m-ya%C5%9Fam-d%C3%B6ng%C3%BC-modelleri-543c7879a742
https://www.youtube.com/watch?v=nHv3-VtiP38
Doç. Dr. Deniz Kýlýnç, Bakýrçay Üniversitesi Yazýlým Mühendisliðine Giriþ Dersi 2. ve 3. Hafta Sunumlarý
